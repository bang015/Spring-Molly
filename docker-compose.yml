version: "3.8"

services:
  frontend:
    container_name: frontend
    image: bang015/frontend
    expose:
      - 3000
    networks:
      - app-network
    environment:
      VITE_SERVER_URL: ${VITE_SERVER_URL}

  backend:
    build:
      context: .
      dockerfile: server/Dockerfile
    container_name: backend
    networks:
      - app-network
    ports:
      - 8080:8080
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${PORT}
      DATABASE_NAME: ${DATABASE_NAME}
      DATABASE_USERNAME: ${DATABASE_USERNAME}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      DATABASE_HOST: ${DATABASE_HOST}
      REDIS_HOST: ${REDIS_HOST}
      REQ_ADDRESS: ${REQ_ADDRESS}
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      CLOUD_NAME: ${CLOUD_NAME}
      API_KEY: ${API_KEY}
      API_SECRET: ${API_SECRET}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}

  nginx:
    container_name: nginx
    image: nginx:latest
    restart: always
    volumes:
      - ./conf/:/etc/nginx/conf.d
      - /data/certbot/conf:/etc/letsencrypt
      - /data/certbot/www:/var/www/certbot
    ports:
      - 80:80
      - 443:443
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  mysql:
    container_name: mysql
    image: mysql:8
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'certbot certonly --webroot -w /var/www/certbot -d molly.n-e.kr --email dh10162@naver.com --agree-tos --non-interactive && cp -a /etc/letsencrypt/live /etc/letsencrypt/archive /etc/letsencrypt/renewal /etc/letsencrypt'"
    depends_on:
      - frontend

  certbot-renewal:
    image: certbot/certbot
    container_name: certbot-renewal
    entrypoint: "/bin/sh -c 'while :; do certbot renew; sleep 12h & wait $${!}; done'"
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
